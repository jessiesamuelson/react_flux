To run:
gulp

SETUP:
npm init
npm install
install gulp and react:
npm install --save react@0.13.3 react-router@0.13.3 flux@2.0.3
npm install --save gulp@3.9.0 gulp-connect@2.2.0 gulp-open@1.0.0
npm install --save browserify@11.0.1 reactify@1.1.1 vinyl-source-stream@1.1.0
npm install --save bootstrap@3.3.5 jquery@2.1.4 gulp-concat@2.6.0
npm install --save gulp-eslint@0.15.0
npm install --save react@0.13.3 react-router@0.13.3 flux@2.0.3
npm install --save lodash

React is the v and c in mvc
React doesn't use two way binding
unpredictable behavior
use unidirectional data changes

JSX:
looks like html in js
differences: className instead of class, etc
compiles to js
optional

Putting html in js
angular, ember, knockout, put js in html
opposite of this

Virtual dom only updates changes
diffs current state with future state

lifecycle methods:
name: componentWillMount:
when: before initial render, client and server
why: set initial state

name: componentDidMount
when: after render
why: integrate with frameworks, ajax

name: componentWillReceiveProps
when: Receiving new props, not on initial render
why: set state before a render

name: shouldComponentUpdate
when:
why: performance, return false for unnecessary render

etc.

keys for dynamic children
add a key to dynamic child elements

props give as a way to pass data to child elements
stat is how we handle data into controller view

controller views are a name for the top level react component
sets props on children
interacts with flux stores

propTypes: {
  author: React.PropTypes.object.isRequired,
  onSave: React.PropTypes.func.isRequired,

}


FLUX:
A pattern
central dispatcher
facebooks flux implementation

two-way binding:
viewmodel -> view
viewmodel <- view
- a change in one changes the other

unidirectional data binding:
action -> dispatcher -> store -> react-view ->
^                                           |
|___________________________________________|
- Information flows in one direction, more explicit, easy to update multiple stores on a given action

ACTIONS:
user interactions that occur in your components
encapsulate events
triggered by user interactions and server
passed to dispatcher
action payload has type and data:
{
  type: USER_SAVED,
  data: {
    firstName: 'Cory',
    lastName: 'House'
  }
}

DISPATCHER:
notifies everyone who cares about the action
singleton
central hub, only one
holds a list of callbacks
broadcasts payload to registered call backs
sends actions to stores

STORES:
Hold app state/data
holds app state, logic, data retrieval
Not a model- contains models
one or many
registers callbacks with dispatcher
only stores register callbacks with dispatcher, not views
uses nodes' EventEmitter
Every store has these common traits (aka interface)
1. Extend EventEmitter
2. addChangeListener and removeChangeListener
3. emitChange

CONTROLLER VIEWS:
React has the concept of the controller view, which is really just the top level component
interacts with the stores, passes updated data down to children
holds data in state, and pass it down through props

FLUX API:
register(function callback) - run this callback when actions happen (from store)
unregister(string id) - stop listening to this action (from store)
waitFor(array<string> ids) - specifies the order of callbacks (from store)
dispatch(object payload) - dispatcher tell the stores about the actions (from actions)
isDispatching() - boolean that is true when the dispatcher is dispatching



var React = require('react');
var Router = require('react-router');
var AuthorActions = require('../../actions/authorActions');
var AuthorStore = require('../../stores/authorStore');
var Dispatcher = require('../dispatcher/appDispatcher');
var AuthorApi = require('../api/authorApi');
var ActionTypes = require('../constants/actionTypes');
